// Generated by Apple Swift version 1.2 (swiftlang-602.0.49.6 clang-602.0.49)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSTimeZone;

@interface NSDate (SWIFT_EXTENSION(CleanroomBase))

/// The <code>year</code> component of the date represented by the receiver. 
@property (nonatomic, readonly) NSInteger year;

/// The <code>month</code> component of the date represented by the receiver. 
@property (nonatomic, readonly) NSInteger month;

/// <dl><dt>The <code>day</code> (of the month) component of the date represented by the</dt><dd><p>receiver. </p></dd></dl>
@property (nonatomic, readonly) NSInteger day;

/// The <code>hour</code> component of the date represented by the receiver. 
@property (nonatomic, readonly) NSInteger hour;

/// The <code>minute</code> component of the date represented by the receiver. 
@property (nonatomic, readonly) NSInteger minute;

/// The <code>second</code> component of the date represented by the receiver. 
@property (nonatomic, readonly) NSInteger second;

/// The <code>nanosecond</code> component of the date represented by the receiver. 
@property (nonatomic, readonly) NSInteger nanosecond;

/// <dl><dt>The <code>weekday</code> component of the date represented by the receiver. This</dt><dd><p>is a value between 1 and <em>n</em> (inclusive). In the Gregorian calendar, 1 
/// represents Sunday, while <em>n</em> is 7, representing Saturday. </p></dd></dl>
@property (nonatomic, readonly) NSInteger weekday;

/// <dl><dt>The <code>weekdayOrdinal</code> component of the date represented by the receiver.</dt><dd><p>This value indicates the current <code>weekday</code>'s ordinal position within the
/// current <code>month</code>. In the Gregorian calendar, a <code>weekdayOrdinal</code> unit of 3
/// for a <code>weekday</code> of 4 represents "the third Wednesday in the month." </p></dd></dl>
@property (nonatomic, readonly) NSInteger weekdayOrdinal;

/// The <code>weekOfMonth</code> component of the date represented by the receiver. 
@property (nonatomic, readonly) NSInteger weekOfMonth;

/// The <code>weekOfYear</code> component of the date represented by the receiver. 
@property (nonatomic, readonly) NSInteger weekOfYear;

/// <dl><dt>The <code>timeZone</code> component of the date represented by the receiver, or</dt><dd><p><code>nil</code> if it could not be determined. </p></dd></dl>
@property (nonatomic, readonly) NSTimeZone * __nullable timeZone;

/// Returns a new <code>NSDate</code> set to the same day as the receiver but with a time
/// value specified by the given hour, minute, second and nanosecond components.
///
/// \param hour The hour component of the time.
///
/// \param minute The minute component of the time.
///
/// \param second The second component of the time.
///
/// \param nanosecond The nanosecond component of the time.
///
/// \returns The new <code>NSDate</code> instance.
- (NSDate * __nonnull)sameDayWithHour:(NSInteger)hour minute:(NSInteger)minute second:(NSInteger)second nanosecond:(NSInteger)nanosecond;

/// Returns a new <code>NSDate</code> representing the 24-hour time <code>00:00:00</code> on the
/// same day as the receiver.
///
/// \param hour The hour component of the time.
///
/// \param minute The minute component of the time.
///
/// \param second The second component of the time.
///
/// \param nanosecond The nanosecond component of the time.
///
/// \returns The new <code>NSDate</code> instance.
- (NSDate * __nonnull)startOfDay;

/// Returns a new <code>NSDate</code> representing the 24-hour time <code>23:59:59.999999999</code>
/// on the same day as the receiver.
///
/// \param hour The hour component of the time.
///
/// \param minute The minute component of the time.
///
/// \param second The second component of the time.
///
/// \param nanosecond The nanosecond component of the time.
///
/// \returns The new <code>NSDate</code> instance.
- (NSDate * __nonnull)endOfDay;

/// Returns a new <code>NSDate</code> representing the current time, but with yesterday's
/// date.
///
/// \returns The new <code>NSDate</code> instance.
+ (NSDate * __nonnull)yesterday;

/// Returns a new <code>NSDate</code> representing the current time, but with tomorrow's
/// date.
///
/// \returns The new <code>NSDate</code> instance.
+ (NSDate * __nonnull)tomorrow;

/// Determines if the receiver represents any time yesterday.
///
/// otherwise.
///
/// \returns <code>true</code> if the receiver represents any time yesterday; <code>false</code>
- (BOOL)isYesterday;

/// Determines if the receiver represents any time today.
///
/// \returns <code>true</code> if the receiver represents any time today; <code>false</code>
/// otherwise.
- (BOOL)isToday;

/// Determines if the receiver represents any time tomorrow.
///
/// \returns <code>true</code> if the receiver represents any time tomorrow; <code>false</code>
/// otherwise.
- (BOOL)isTomorrow;

/// Determines if the receiver represents any time before today.
///
/// \returns <code>true</code> if the receiver represents any time before today;
/// `false` otherwise.
- (BOOL)isEarlierThanToday;

/// Determines if the receiver represents any time after today.
///
/// \returns <code>true</code> if the receiver represents any time after today;
/// `false` otherwise.
- (BOOL)isLaterThanToday;

/// Determines if the receiver represents a time between two given times
/// or is equal to one of the times.
///
/// <strong>Note:</strong> The order of the <code>time1</code> and <code>time2</code> arguments is not significant;
/// they may be swapped without changing the return value of the function.
///
/// \param time1 The first <code>NSDate</code> value.
///
/// \param time2 The second <code>NSDate</code> value.
///
/// \returns <code>true</code> if the receiver represents any time between <code>time1</code> and
/// `time2` (inclusive); <code>false</code> otherwise.
- (BOOL)isBetween:(NSDate * __nonnull)time1 and:(NSDate * __nonnull)time2;

/// Determines if the current time falls between two given times or is equal
/// to one of the times.
///
/// <strong>Note:</strong> The order of the <code>time1</code> and <code>time2</code> arguments is not significant;
/// they may be swapped without changing the return value of the function.
///
/// \param time1 The first <code>NSDate</code> value.
///
/// \param time2 The second <code>NSDate</code> value.
///
/// \returns <code>true</code> if the current time is between <code>time1</code> and <code>time2</code>
/// (inclusive); <code>false</code> otherwise.
+ (BOOL)currentTimeIsBetween:(NSDate * __nonnull)time1 and:(NSDate * __nonnull)time2;

/// Returns a new <code>NSDate</code> containing the same time as the receiver, but with
/// the date adjusted earlier or later by the given number of days.
///
/// \param days The number of days to add to (if positive) or subtract 
/// from (if negative) the receiver.
///
/// \returns The new <code>NSDate</code> instance.
- (NSDate * __nonnull)adjustDay:(NSInteger)days;

/// Returns a new <code>NSDate</code> containing the same time as the receiver, but one
/// day earlier.
///
/// \returns The new <code>NSDate</code> instance.
- (NSDate * __nonnull)dayBefore;

/// Returns a new <code>NSDate</code> containing the same time as the receiver, but one
/// day later.
///
/// \returns The new <code>NSDate</code> instance.
- (NSDate * __nonnull)dayAfter;

/// Determines whether the specified <code>NSDate</code> represents the same day as the
/// receiver.
///
/// \param date The date to test.
///
/// \returns <code>true</code> if <code>date</code> represents any time on the same day as
/// the receiver; <code>false</code> otherwise.
- (BOOL)isSameDayAs:(NSDate * __nonnull)date;
@end

#pragma clang diagnostic pop
